= PIONEの概要

PIONEは
（Process-rule for Input/Output Negotiation Environment）の概要として、
PIONEの目的と特徴、システムの全体像、ルール方式、定義書の記述法をそれぞれ簡潔に説明する。

== 目的と特徴

=== 目的

PIONEの目的は、入力ファイルに基づいて出力ファイルを得る汎用のプロセス定義方式（記述方式）を提供し、またその処理を行うシステムを提供する事にある。より具体的には、makeによるプロセス定義に対する改善として、下記を目的とする。

 * 記述性の優れたプロセス定義方式を提供する
 * 定義の再利用性を確保する
 * 多入力・多出力のデータフローを扱う
 * 分散処理を可能とする

=== 特徴

PIONEはその目的を達成する為、プロセス定義をルール形式により定め処理を行う方式を考案している。これは下記の特徴を備える。

 * ファイルを処理単位とするプロダクションシステム類似の前向き推論型ルールシステムを採る
 * 「フロールール」と「アクションルール」の二種のルールにより、プロセスのフローとアクションを明確に区別して表現出来る
 * ルール入出力として表わされるファイル依存関係とその更新判定を利用した効率的な部分更新処理を可能とする
 * ワーキングメモリをLindaモデルに基づくタプル空間として実現し、またルール適用の単位において空間を領域分割する事により、タスク分割型の分散処理を実現する
 * タスクとそれを処理する主体は、「特性」の概念により適切なマッチングが可能である
 * マルチエージェントシステムであり、機能分離と役割の分割が実現されている

これらの特徴により、PIONEは優れた記述性と効率的な処理、柔軟な運用を実現する。

== システム全体像

=== エージェント

PIONEはマルチエージェントシステムであり、各エージェントが協調動作することにより処理を実現する。エージェントには下記のものが存在する。

: クライアント
   タプル空間の提供とプロセス処理依頼を行う※
: ブローカ
   タプル空間の状況把握とタスクワーカの割当管理を行う
: タスクワーカ
   タプル空間に存在するタスクを処理する
: 入力ジェネレータ
   初期データをタプル空間に入力する
: ロガー
   ログの管理を行う
: ルールプロバイダ
   タスクワーカに対するルールの提供を行う
: タプル空間プロバイダ
   タプル空間レシーバにタプル空間の場所を伝達する
: タプル空間レシーバ
   ブローカに対してタプル空間を提供する
: リレー
   セグメントを超える為にクライアント・ブローカ間通信を中継する
   ※将来的には、タプル空間の提供と処理依頼の役割は分割される予定

=== 基本構成

PIONEは大きく次のような基本構成に分けられる。

: クライアント群
   プロセス処理依頼とタプル空間の提供を行う※
: ブローカ群
   タスクワーカを供給し、プロセス処理を実行する
: リレーサーバ
   クライアントとブローカの通信を中継する
: ファイルサーバ
   ファイルストレージを提供する
   ※ 将来的には、タプル空間の提供と処理依頼の役割は分割される予定

クライアント群はプロセス処理依頼を実現し、ブローカ群は依頼された処理を実施する。リレーサーバは、ネットワークセグメントが異なるクライアント群とブローカ群を接続する役割を果たす。なお、上記構成の関係を示したPIONEシステムの全体像は別紙１を参照。

==== クライアント群

標準的なクライアント構成は下記のエージェントから成る。

 * クライアント
 * 入力ジェネレータ
 * ロガー
 * ルールプロバイダ
 * タプル空間プロバイダ
 * タスクワーカ

クライアント群は、タプル空間の提供や入力ジェネレータのデータ投入などにより、処理依頼を可能とする環境を構築する。クライアント群は概ね下記のシーケンスにより処理依頼を実現する。

 1. クライアントがタプル空間の提供を開始する。
 2. ロガーがタプル空間へ接続し、ログを監視する。
 3. 入力ジェネレータがタプル空間に接続し、入力データをタプル空間上に反映する。ストリーム処理の場合には入力追加の継続監視を行う。
 4. 定義書を翻訳し、ルールを得る。ルールプロバイダがルールをタスクワーカに配信する。
 5. タプル空間プロバイダによるタプル空間の存在通知を開始する。
 6. タスクワーカが起動される。※
 7. クライアントがルートルールの実行を開始する。

※タスクワーカはブローカ側においても起動されるが、クライアント側のみで処理を完結するスタンドアローン実行時やクライアント側のみで実行されるべきプロセスを処理する為に存在する。

==== ブローカ群

標準的なブローカ構成は下記のエージェントから成る。

 * ブローカ
 * タスクワーカ
 * タプル空間レシーバ

ブローカ側のシーケンスは下記の通りとなる。

 1. ブローカが起動される。
 2. タプル空間レシーバが起動される。
 3. タプル空間レシーバに対して存在通知が行われた場合、タスクワーカが起動されてタプル空間との接続が行われる。
 4. タプル空間に接続されたタスクワーカがタスク処理を開始する。

==== リレーサーバ

リレーサーバは下記エージェントから成る。

 * リレー
 * タプル空間プロバイダ

リレーはクライアント側からの接続により、ブローカ側に対してクライアントと同様の振る舞いを行う。

==== ファイルサーバ

ファイルサーバはファイルデータを実際に保持する機能を果たす。ファイルサーバ自身はPIONEシステムが提供するのではなく、既存の一般的なファイルサーバを利用する事になる。現在PIONEが対応するファイルサーバとしては、ローカルファイル、FTPサーバ、Dropboxが存在する。

=== 運用形態

PIONEシステムの実際の構成は、運用により基本構成を組み合わせて柔軟に変更が可能である。目的に応じて下記のような運用形態が考えられる。

: クライアント群のみによる、スタンドアローン構成
    //noindent
    例）ローカルマシン単体で処理を行う場合@<br>{}
    例）定義書の試験を行う場合
: ブローカ群・リレーサーバ構成
    //noindent
    例）計算能力を提供するサービスを行う場合@<br>{}
        クライアント群／ブローカ群／ファイルサーバ構成@<br>{}
    例）LAN内の計算機を使用した分散処理を行う場合@<br>{}
        クライアント群／ブローカ群／リレーサーバ／ファイルサーバ構成@<br>{}
    例）インターネットを経由した分散処理を行う場合
: エージェント間通信
    各エージェントは基本的にタプル空間を共有メモリとして協調動作を実現する。タプル空間はクライアントが提供するが、他エージェントがタプル空間に接続する方法は分散オブジェクト通信による。ただしプロセス間通信としてタプル空間を経ずに直接分散オブジェクト通信を行う場合（例えば、ブローカによるタスクワーカの割当管理や、リレーによる通信の中継）や、下記に示す存在通知といった例外が存在する。
: 存在通知
    クライアント群とブローカ群はタプル空間を共有する為に、ブローカ群はタプル空間の存在場所をクライアント群から伝達されなければならない。このタプル空間の存在の通知を存在通知と呼び、これをタプル空間プロバイダとタプル空間レシーバにより実現する。クライアント群に属するタプル空間プロバイダはタプル空間の存在をUDPパケットのブロードキャストにより伝達し、ブローカ群に属するタプル空間レシーバはそれを受け取りタプル空間参照に変換する。

