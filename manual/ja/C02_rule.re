= ルール概要

PIONEはプロダクションシステム類似のルールシステムを採用しており、プロセスをルールの単位により処理する。ルール方式における概念としては下記のものが存在する。

 * ルール定義体
 * タプル空間
 * 処理対象ファイル
 * 変数表
 * ルール適用
 * 更新判定
 * ルール定義体

ルールは入出力を伴う条件と振る舞いの対であり、従ってその構造も条件定義部＋振る舞い定義部として構成される。条件定義部ではルールの適用条件の定義を行い、振る舞い定義部では適用された場合のルールの振る舞い内容の定義を行う。ルールはその振る舞い定義の種別により、アクションルール／フロールールと呼び分ける。

== 条件定義部

条件定義部では、ルールの入出力条件と適用条件の両面を定義する。具体的には下記の四条件の定義を行う。

: 入力定義
    ファイル名等に基づく入力ファイルの条件を定義する
: 出力定義
    ファイル名等に基づく出力ファイルの条件を定義する
: パラメータ定義
    ルールの挙動を変更する為のパラメータを定義する
: 特性定義
    ルール処理を行うタスクワーカに対する、特性要求を定義する

入力定義により、その実際の適用状況によって自動的に反復処理が実現出来る（適用対象が複数候補ある場合には、その分の反復処理が実施される）。パラメータはルールの挙動を変更する情報の受け渡しに用いられ、特性定義はタスクワーカの処理可能性を制御する。

== 振る舞い定義部

振る舞い定義部は、ルールが適用された場合の挙動として、アクション定義もしくはフロー定義が定義される。

=== アクション定義

アクション内容はシェルスクリプトとして記述される。従ってシェルスクリプトとして記述可能な任意のアクションが定義できる。

=== フロー定義

フロー内容はフロー要素から構成される。フロー要素は下記の三種類の文から成る。

: 変数束縛文
    変数表にローカル変数を束縛する
: 条件文
    条件付きのフロー定義を行う
: ルール呼び出し文
    パラメータ指定などを伴い、ルール適用を表現する

フロー要素は全て宣言的に記述される。各要素の処理順序はシステムが自動判断する為、記述順序は意味をなさない。

== 特殊ルール

上記の定義体を基本形として、特殊な定義体として次のルールが存在する。

: ルートルール
    クライアントにより処理時の最初に暗黙的に実行されるルール
: メインルール
    処理の開始位置となるルール
: システムルール
    特殊なアクションを行うルール（&system:Terminate等）

ルートルールはメインルールを呼び出す為の暗黙的ルールであり、存在はするが、ユーザがこれを意識する必要はない。メインルールは定義書中においてルール名「Main」として定義されたルールであり、処理の開始位置として呼び出される。システムルールはシステム側で定義した特殊なシステム操作を行うルールである。

== タプル空間

PIONEにおけるルール処理は、処理対象や処理情報を表現するワーキングメモリとしてタプル空間を使用する。ルールに関わるタプルとしては下記の６種が存在する。

: データタプル
    ドメインIDとデータ名により識別される、ファイルの情報を表す
: タスクタプル
    ルール適用を待つタスクを表す
: 作業中タプル
    ドメインIDにより識別される、タスクの処理中であることを表す
: 完了タプル
    ドメインIDにより識別される、タスクの完了を表す
: ルール要求タプル
    ルールパスにより識別される、ルール定義体の要求を表す
: ルールタプル
    ルールパスにより識別される、ルール定義体を表す

タプル空間に対する操作は、読み込み（read）、取り出し(take)、書き込み（write）の３種類が用意されている。通常、タプルの読み込み・取り出し操作は、対象がタプル空間に書き込まれるまで停止する。

== 処理対象ファイル

ルールが処理の対象とするモデルは、名前とデータ、更新時間が紐付けられたファイルである（ただしディレクトリの概念は持たない）。ルールの入出力は共にファイルであり、ルールはファイルを次々と作成・更新していく事により一連のプロセス処理を実現する。

== ファイル表現

ファイルを配置した空間をファイル空間と呼ぶ。具体的には、ファイルはタプル空間上とファイルサーバ上の二つの空間において表現される。名前と更新時間は両者が共に同じ情報を持つ事を前提にするが、効率の為、データ内容はファイルサーバ上にのみ存在し、代わりにタプル空間においてはファイルサーバ上への参照情報（URI形式による）を持つ事で代替とする。

== ドメイン

ファイル空間は内部に区切りを持っており、これをドメインと呼ぶ。ファイルは必ずいずれかのドメインに属する。ドメインは後述のルール呼び出し毎に作成されることで、ルール適用のスコープとしての機能を果たす。ドメインはタプル空間上においてはドメインIDにより表現され、ファイルシステム上ではディレクトリにより表現される。

== 変数表
ルールは適用時において変数名と値の対から成る変数の表を持つ。変数表に格納される変数には、変数が束縛される契機の区別により下記の種類が存在する。

 1. 自動変数		ルール適用の際に暗黙的に設定される変数
 2. パラメータ変数	パラメータ指定により設定される変数
 3. ローカル変数		フロー要素である変数束縛文により設定される変数
 4. ドキュメント変数	ドキュメントにおいてグローバルスコープで定義された変数

なお、変数は全て単一代入とし、異なる値を再束縛する事は出来ない。

=== 自動変数

自動変数はルール適用の際に暗黙的に設定される変数であり、下記のものが存在する。

: 入力変数
    入力定義に対しマッチしたファイル名情報が格納される
: 出力変数
    出力定義に対しマッチしたファイル名情報が格納される
: 環境変数
    タスクワーカの持つ環境変数が設定される

具体的には、入力変数として変数「I」、出力変数として変数「O」が設定される。これらはそれぞれ入力定義・出力定義と実際にマッチしたファイル名を表す値が格納されており、式「$I[1]」により先頭入力定義文のファイル名が取得できる。また、式「$I[1][1]」は先頭入力定義文の先頭ワイルドカードにマッチした文字列が取得できる。さらに、式「$I[1][1]」の略記法となる入力変数の一種として変数「*」が設定される。

=== ルール適用

ルール定義体に対して適用条件に一致するファイルを与えた場合、ルールの適用が行われる。ルール適用は、入力に対してルールの振る舞い定義を適用し、結果として出力を得る操作である。
アクション処理
アクションルールの適用を行う場合、定義内容からシェルスクリプトを作成し、そのスクリプトの実行を行う。具体的には下記の処理を行う。

 1. 作業中タプルをタプル空間に書き出す。
 2. 作業領域を作成し、その場所に移動する。
 3. ファイルサーバから作業領域に入力ファイルをコピーする。
 4. 変数表に従い、アクション定義内容に対して変数展開を行う。
 5. 作業領域に上記の展開後の結果文字列を内容としたシェルスクリプト作成する。
 6. シェルスクリプトの実行を行う。
 7. 作業領域上の出力ファイルを収集する。
 8. 出力ファイルから対応するタプルデータを同ドメイン内に作成する。
 9. 出力ファイルを作業領域からファイルサーバ上のドメインにコピーする。
 10. タプル空間から作業中タプルを取り出し、完了タプルを書き出す。

==== フロー処理

フロールールの適用を行う場合、フロー定義を構成するフロー要素の列であるブロックの処理を実施する。ブロックの処理ではまず最初に変数束縛文、条件文を優先して処理し、最後にルール呼び出し文のみが残った時点でルール呼び出し処理を一括して行う。

 1. 作業中タプルをタプル空間に書き出す。
 2. 変数束縛文・条件文の処理を行う。
 3. ルール呼び出し文の処理を行う。
 4. 完了タプルを書き出す。

==== 変数束縛文処理

変数束縛文は、変数名と値の対から成る。この対を変数表に書きこみ、変数表を更新する。更新に成功した場合、ブロックから文を削除して次の処理に進む。失敗した場合には、エラーが発生する。

==== 条件文処理

条件文は、条件＋フロー要素列の組み合わせである条件ブロックの列から構成される。その列中において条件が真となる最初の条件ブロック内のフロー要素列をブロックに追加する。文を削除し、次の処理に進む。

==== ルール呼び出し文処理

ルール呼び出し文は、ルール表現により指定されたルールの呼び出しを行う。

 1. ルール表現から対応するルール定義体を取得し（タプル空間にルール要求タプルを書き出し、ルールタプルを読み込む）、
    呼び出しルールの入力条件と出力条件を取得する。
 2. 現在のドメイン内におけるファイルから、入力条件に適合する入力ファイルの組み合わせを探索する。
    発見した組み合わせについて、下記の処理を行う。
    1. 出力条件に適合する出力ファイルを探索する。
    2. 入力ファイルと出力ファイルの組み合わせからルール適用形式（ルール名＋入力＋パラメータの組による形式）を作成し、
       後述の更新判定を実施する。判定結果が偽であるものは、ルール適用対象から除外する。
    3. ルール適用形式からドメインIDを算出し、タプル空間上にそのIDを持つ入力ファイルを作成する。
    4. ルール適用形式からタスクタプルを作成し、タプル空間に書き出す。
    5. 上記のタスクタプル分だけのスレッドを作成し、そのスレッドにおいてタスクタプルに対応するドメインIDの完了タプルを読み込む。
    6. メインスレッドにてサブタスクワーカを一つ起動する。サブタスクワーカは、取得したタスクを一つ完了させた時点で停止する。
    7. サブタスクワーカの停止を待つ。
       停止を確認した場合には、⑤で作成したスレッドが全て終了しているかを確認する。
       終了している場合には、次の処理に進み、終了していない場合には⑥に戻って再度サブタスクワーカを起動する。
    8. 適用したドメインIDのドメインから出力ファイルを現在のドメインにコピーする。
 3. 上記において新たな出力ファイルがひとつでも得られた場合、2に戻る。そうでない場合、ルール呼び出しを終了する。

=== 更新判定

ルールはその適用にあたって本当に更新の必要があるかを判定する。この具体的な更新判定の基準は下記の通り。

 1. 出力ファイルがドメイン内に存在しない場合、真である。
 2. 出力ファイルよりも入力ファイルの更新時間が新しい場合、真である。
    複数入力、複数出力の場合、出力に比べて入力側に一つでも更新時間が新しいファイルが存在する場合、真である。
 3. 定義上出力が存在しないシステムルールの適用は、常に真である。
    ただし、出力の存在しないルールはシステムルールのみが許容され、他の場合にはそもそも定義書のモデル違反である。
    従って、この基準が適用されるのはシステムルールのみである。

