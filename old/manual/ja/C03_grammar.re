= 定義書記述法

PIONE定義書の記述方法を説明する。下記の３点の視点に分けて説明を行う。

 1. 式の記述方法
 2. コメント記法
 3. ルール定義方法
 4. 式展開

なお、定義書の統語定義は別紙４を参照。

== 式の記述方法

プロセス定義書内には各種の値を表わす為の式が存在する。プロセス定義書内に書き得る値の種類には下記の種類（型）が存在する。

: 真偽型
    true, false
: 文字列型
    "abc", "ABC", ...
: 整数型
    -1, 0, 1, +1, ...
: 浮動小数点数型
    -1.0, 0.0, 1.0, +1.0, ...
: ルール表現型
    test, Test, &test:test, ...
: データ表現型
    '*.txt', 'a*.txt', ...
: 特性型
    +A, ?A, -A, ^A, !A
: パラメータ表現型
    {}, {key1: value1, key2: value2, ...}, ...

また、値を格納する変数が存在する。

//emlist{
$var
//}

=== メッセージ

値に対してメッセージを送る事が出来る。メッセージの受け手は、メッセージに対応してメソッドを実行する（メソッドの一覧は、別紙３を参照）。

//emlist{
1.as_string #=> "1"
1.as_float #=> 1.0
"a.txt".as_data_expr #=> 'a.txt'
'*.txt'.except('summary.txt') #=> DataExpr.new("*.txt").except('summary.txt')
//}

なお、メッセージ送信は受け手の状態を変化させない（副作用なし）。例えばデータ表現型の値に対するexceptメッセージはデータに対して適用例外を設定するが、受け手の状態が変化するのではなく、例外設定を行った新しいデータ値を返却する。

//emlist{
$rec := '*.txt'
$new := $rec.except('summary.txt')
$rec == $ new #=> false
$rec == '*.txt' #=> true
$new == '*.txt'.except('summary.txt') #=> true
//}

=== 演算子

演算子はメッセージ送信の糖衣構文として使用される記号である。

//emlist{
1 + 2 #=> 3
//}

上記は「1.+(2)」と同じである。演算子には下記が存在する。

//emlist{
==, !=, >=, >, <=, <, &&, ||, +, -, *, /, %
//}

=== 括弧記号
式は括弧記号により任意に括る事が出来る。

//emlist{
1
(1)
((1))
(((1)))
//}

=== ルール表現に関する補足

ルール表現は、パッケージとルール名により記述される（例：&package_name:rule_name）。
パッケージ名は省略可能であるが、省略した場合には文脈上のパッケージが暗黙的に設定される。

=== データ表現に関する補足

データ表現は'*.txt'のように書くことで、拡張子「.txt」を持つあらゆるファイルに一致する表現となる（ワイルドカード表記）。
データ表現の解釈にはall解釈とeach解釈が存在し、all解釈はワイルドカードにより一致した全てのファイルを一度にリストとしてルール適用するが、each解釈では一致したファイルをそれぞれルール適用する。
all解釈かeach解釈かの選択には、メッセージ送信を行う（all, each）。

== コメント記法

定義書内におけるコメントは、「#」に続く文字列として記述が可能である。ただしアクションルールにおける振る舞い定義部内では、このコメント記法は適用されず、そのまま振る舞いの一部として解釈される。
※現在のところ、実装ではアクションルール内においても「#!」行を除きコメント記法として扱っているが、これはいずれ修正される

== ルール定義方法

ルールは下記の３要素から構成される。

 1. ルールヘッダー
 2. 条件定義部
 3. 振る舞い定義部

//emlist{
Rule Test        # 1. ルールヘッダー
  input '*.a'    # 2. 条件定義部
  output '*.b'   # 2.
  params $var    # 2.
  feature +A     # 2.
Flow             # 3. 振る舞い定義部
  $Var := true   # 3.
  rule TestA     # 3.
  if $Var        # 3.
    rule TestB   # 3.
  end            # 3.
End              # 3.
//}

=== ルールヘッダー

ルールヘッダーは定義するルールの名前を宣言する。

//emlist{
Rule Test
//}

キーワード「Rule」の後に式を記述する事により定義される。名前はルール表現値により与える。

=== 条件定義部

条件定義部には、ルールの適用条件文を記述する。適用条件文には４種類存在する。

 1. 入力条件文
 2. 出力条件文
 3. パラメータ条件文
 4. 特性条件文

適用条件文はそれぞれ複数記述が可能であり、かつその並びは基本的に意味を持たない。ただし入力条件文及び出力条件文から束縛される自動変数は、その順序に意味を持つ。

=== 入力条件文

入力条件文はルールの入力対象となるデータを名前により表現する。

//emlist{
input '*.a'
//}

キーワード「input」の後に式を記述する事により定義する。対象はデータ表現型の値により与える。

=== 出力条件文

出力条件文はルールの出力対象となるデータを名前により表現する。

//emlist{
output '*.a'
//}

キーワード「output」の後に式を記述する事により定義する。対象はデータ表現型の値により与える。

=== パラメータ条件文

パラメータ条件文はルールに指定されるべきパラメータを表現する。

//emlist{
param $var
//}

キーワード「param」の後に式を記述する事により定義する。パラメータは変数により与える。また、デフォルト値付きのパラメータを設定する事も出来る。ルール呼び出し時にパラメータが指定されない場合には、この値がパラメータ変数に設定される。

//emlist{
param $var := 1
//}

=== 特性条件文

特性条件文はタスクワーカに要求する特性を特性表現により表現する。

//emlist{
feature +A
//}

キーワード「feature」の後に式を記述する事により定義を行う。対象は特性表現値により与える。特性表現の記述に関する詳細については、別紙２を参照。

=== 振る舞い定義部

振る舞い定義部には、ルール適用時の振る舞いを記述する。アクション定義とフロー定義の２種類が存在する。

==== アクション定義

アクション定義は、シェルスクリプトの定義を行う。

//emlist{
Action
echo "a"
End
//}

キーワード「Action」行の次行よりスクリプト内容を記述する。キーワード「End」行により内容を終了する。

==== フロー定義

フロー定義はフロー要素文の列から構成される。フロー要素は下記の３種類から成る。

 1. 変数束縛文
 2. ルール呼び出し文
 3. 条件処理文

==== 変数束縛文

変数束縛は変数表に対して変数名と値を対応付ける。

//emlist{
$var := 1
//}

変数に続けて記号「:=」を記述し、式を値として記述する。

==== ルール呼び出し文

ルール呼び出し文はルール適用の開始を表現する。

//emlist{
rule test
//}

キーワード「rule」に続けて式を記述する。対象はルール表現値により表現する。パラメータを渡す場合には、下記のようにパラメータ型の値を設定する事により行う。

//emlist{
rule test.params({key1: 1, key2: true})
//}

==== 条件処理文

条件処理文は、フローの条件分岐を表現する。文により条件とフローの対応関係を作成し、条件を満たした最初のフローを処理する。条件処理にはif文とcase文が存在する。

//emlist{
if文
if $var == "abc"
  rule TestABC
else
  rule TestOhter
end
//}

キーワード「if」に続けて式を記述する。
式は真偽値を表わすものとし、真偽値trueの場合のみ後続の「rule TestABC」のフローが実施される。キーワード「else」以降の記述は任意であり、前述の式が真偽値true以外の場合に実施されるフローを表す。if文の終了は、キーワード「end」行により表わす。

==== case文

//emlist{
case $var
when 1
  rule test1
when 2
  rule test2
when 3
  rule test3
else
  rule test4
end
//}

キーワード「case」に続けて式を記述する。
式は任意の値を表すものとし、キーワード「when」に後続する式と一致するフローが実施される。
キーワード「else」以降の記述は任意であり、どのwhen節とも一致しなかった場合に実施されるフローを表す。
case文の終了は、キーワード「end」行により表わす。

== 式展開

データ表現、文字列、アクションルールにおけるシェルスクリプト内において、変数や式を記述出来る。
値として変数や式が展開された結果が得られるので、これを式展開と呼ぶ。

//emlist{
'{$var}.txt'
'<? 1 + 1 ?>.txt'
"a {$b} c"
"1 + 1 = <? 1 + 1 ?>"
//}

式展開は、「{$変数名}」もしくは「<?式?>」の形式により記述する。
ただし前者は式の先頭（レシーバ）が変数として記述されている場合にのみ可能である。

